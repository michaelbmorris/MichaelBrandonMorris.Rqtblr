// <auto-generated />
using MichaelBrandonMorris.Rqtblr.Data;
using MichaelBrandonMorris.Rqtblr.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MichaelBrandonMorris.Rqtblr.Data.Migrations
{
    [DbContext(typeof(RqtblrDbContext))]
    [Migration("20180130184641_004")]
    partial class _004
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MatchId");

                    b.Property<int>("TeamOneScore");

                    b.Property<int>("TeamThreeScore");

                    b.Property<int>("TeamTwoScore");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.Ladder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ladders");
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.LadderPlayer", b =>
                {
                    b.Property<int>("LadderId");

                    b.Property<string>("PlayerId");

                    b.Property<double>("Rank");

                    b.HasKey("LadderId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("LadderPlayer");
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameType");

                    b.Property<bool>("IsComplete");

                    b.Property<int?>("LadderId");

                    b.Property<int?>("TeamOneId");

                    b.Property<int?>("TeamThreeId");

                    b.Property<int?>("TeamTwoId");

                    b.HasKey("Id");

                    b.HasIndex("LadderId");

                    b.HasIndex("TeamOneId");

                    b.HasIndex("TeamThreeId");

                    b.HasIndex("TeamTwoId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PlayerOneId");

                    b.Property<string>("PlayerTwoId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerOneId");

                    b.HasIndex("PlayerTwoId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.Game", b =>
                {
                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.Match", "Match")
                        .WithMany("Games")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.LadderPlayer", b =>
                {
                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.Ladder", "Ladder")
                        .WithMany("LadderPlayers")
                        .HasForeignKey("LadderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.User", "Player")
                        .WithMany("LadderPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.Match", b =>
                {
                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.Ladder", "Ladder")
                        .WithMany("Matches")
                        .HasForeignKey("LadderId");

                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.Team", "TeamOne")
                        .WithMany()
                        .HasForeignKey("TeamOneId");

                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.Team", "TeamThree")
                        .WithMany()
                        .HasForeignKey("TeamThreeId");

                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.Team", "TeamTwo")
                        .WithMany()
                        .HasForeignKey("TeamTwoId");
                });

            modelBuilder.Entity("MichaelBrandonMorris.Rqtblr.Models.Team", b =>
                {
                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.User", "PlayerOne")
                        .WithMany()
                        .HasForeignKey("PlayerOneId");

                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.User", "PlayerTwo")
                        .WithMany()
                        .HasForeignKey("PlayerTwoId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MichaelBrandonMorris.Rqtblr.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
